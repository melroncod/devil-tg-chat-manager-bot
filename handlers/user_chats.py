import asyncio

from aiogram import Router, F, Bot, exceptions
from aiogram.enums import ChatType, ChatMemberStatus
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup,
    InlineKeyboardButton, ChatMemberUpdated
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.chat_member_updated import (
    ChatMemberUpdatedFilter,
    JOIN_TRANSITION,
    LEAVE_TRANSITION,
)

from loader import bot
from db import (
    get_user_chats,
    remove_user_chat, add_user_chat,
    get_link_filter, set_link_filter,
    get_caps_filter, set_caps_filter,
    get_spam_filter, set_spam_filter,
    get_swear_filter, set_swear_filter,
    get_keywords_filter, set_keywords_filter,
    get_sticker_filter, set_sticker_filter,
    set_welcome_message, get_welcome_message,
    set_rules, get_rules,
    get_log_settings, set_log_chat,
    update_log_status, get_welcome_delete_timeout,
    get_join_delete, set_join_delete,
    get_devil_mode, set_devil_mode,
)
from services.logger import send_log
from handlers.start import inline_kb, reply_kb

router = Router()
WELCOME_DELETE_DEFAULT = 60


class WelcomeStates(StatesGroup):
    waiting_for_welcome = State()


class RulesStates(StatesGroup):
    waiting_for_rules = State()


class LoggingStates(StatesGroup):
    waiting_for_log_chat_id = State()


async def is_admin_in_chat(chat_id: int, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception:
        return False


@router.message(F.text.lower() == "–º–æ–∏ —á–∞—Ç—ã", F.chat.type == ChatType.PRIVATE)
async def cmd_my_chats(message: Message):
    user_id = message.from_user.id
    uc = get_user_chats(user_id)
    if not uc:
        return await message.answer(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —á–∞—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ¬´–£—Å—Ç–∞–Ω–æ–≤–∫–∞¬ª.",
            parse_mode="Markdown"
        )

    valid = {}
    for chat_id, name in uc.items():
        try:
            await bot.get_chat(chat_id)
            valid[chat_id] = name
        except (exceptions.TelegramForbiddenError, exceptions.TelegramBadRequest):
            remove_user_chat(user_id, chat_id)

    if not valid:
        return await message.answer(
            "–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ (–±–æ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–∞).",
            parse_mode="Markdown"
        )

    buttons = [
                  [InlineKeyboardButton(text=name, callback_data=f"manage_uc:{chat_id}")]
                  for chat_id, name in valid.items()
              ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í–∞—à–∏ —á–∞—Ç—ã:", reply_markup=kb)


@router.my_chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def on_bot_added(event: ChatMemberUpdated):
    me = await bot.get_me()
    if event.new_chat_member.user.id != me.id:
        return

    inviter = event.from_user
    if inviter is None:
        return

    chat = event.chat
    chat_id = chat.id
    chat_title = chat.title or str(chat_id)
    inviter_id = inviter.id

    try:
        member = await bot.get_chat_member(chat_id, inviter_id)
        if member.status not in (ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR):
            return
    except Exception:
        return

    add_user_chat(inviter_id, chat_id, chat_title)

    try:
        await bot.send_message(
            inviter_id,
            f"‚úÖ –ß–∞—Ç ¬´{chat_title}¬ª (ID {chat_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ ¬´–ú–æ–∏ —á–∞—Ç—ã¬ª."
        )
    except exceptions.TelegramForbiddenError:
        pass


@router.callback_query(F.data == "back_to_main")
async def callback_back_to_main(cq: CallbackQuery):
    try:
        await cq.message.delete()
    except:
        pass

    await bot.send_message(
        cq.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_kb
    )
    await cq.answer()


@router.callback_query(F.data.startswith("manage_uc:"))
async def callback_manage_uc(cq: CallbackQuery):
    chat_id = int(cq.data.split(":", 1)[1])

    try:
        target_chat = await bot.get_chat(chat_id)
        chat_title = target_chat.title or target_chat.username or str(chat_id)
    except (exceptions.TelegramForbiddenError, exceptions.TelegramBadRequest):
        remove_user_chat(cq.from_user.id, chat_id)
        await cq.answer()
        return await callback_back_to_chats(cq)

    links_state = get_link_filter(chat_id)
    caps_state = get_caps_filter(chat_id)
    spam_state = get_spam_filter(chat_id)
    sticker_state = get_sticker_filter(chat_id)
    swear_state = get_swear_filter(chat_id)
    keywords_state = get_keywords_filter(chat_id)
    devil_state = get_devil_mode(chat_id)

    links_btn_text = f"üîó –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫: {'–í–∫–ª' if links_state else '–í—ã–∫–ª'}"
    caps_btn_text = f"üî† –ê–Ω—Ç–∏–∫–∞–ø—Å: {'–í–∫–ª' if caps_state else '–í—ã–∫–ª'}"
    spam_btn_text = f"üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º: {'–í–∫–ª' if spam_state else '–í—ã–∫–ª'}"
    stickers_btn_text = f"‚≠ê –ê–Ω—Ç–∏-—Å—Ç–∏–∫–µ—Ä—ã: {'–í–∫–ª' if sticker_state else '–í—ã–∫–ª'}"
    swear_btn_text = f"ü§¨ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–∞: {'–í–∫–ª' if swear_state else '–í—ã–∫–ª'}"
    keywords_btn_text = f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {'–í–∫–ª' if keywords_state else '–í—ã–∫–ª'}"
    devil_btn_text = f"üòà Devil mode: {'–í–∫–ª' if devil_state else '–í—ã–∫–ª'}"

    settings = get_log_settings(chat_id) or {}
    log_chat_id = settings.get("log_chat_id")
    logging_enabled = settings.get("is_logging_enabled", False)

    if log_chat_id:
        try:
            log_chat = await bot.get_chat(log_chat_id)
            log_title = log_chat.title or log_chat.username or str(log_chat_id)
        except Exception:
            log_title = str(log_chat_id)
    else:
        log_title = None

    log_btn_text = (
        f"üîî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –í–∫–ª ({log_title})"
        if logging_enabled and log_title
        else "üîï –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –í—ã–∫–ª"
    )

    join_enabled = get_join_delete(chat_id)
    join_btn_text = (
        "üóëÔ∏è –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ Join/Leave: –í–∫–ª"
        if join_enabled
        else "‚ùå –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ Join/Leave: –í—ã–∫–ª"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=links_btn_text, callback_data=f"filter_links:{chat_id}")],
        [InlineKeyboardButton(text=caps_btn_text, callback_data=f"filter_caps:{chat_id}")],
        [InlineKeyboardButton(text=spam_btn_text, callback_data=f"filter_spam:{chat_id}")],
        [InlineKeyboardButton(text=stickers_btn_text, callback_data=f"filter_stickers:{chat_id}")],
        [InlineKeyboardButton(text=swear_btn_text, callback_data=f"filter_swear:{chat_id}")],
        [InlineKeyboardButton(text=keywords_btn_text, callback_data=f"filter_keywords:{chat_id}")],
        [InlineKeyboardButton(text="üí¨ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data=f"setup_welcome:{chat_id}")],
        [InlineKeyboardButton(text="üìú –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª", callback_data=f"setup_rules:{chat_id}")],
        [InlineKeyboardButton(text=join_btn_text, callback_data=f"toggle_join_delete:{chat_id}")],
        [InlineKeyboardButton(text=log_btn_text, callback_data=f"logging:{chat_id}")],
        [InlineKeyboardButton(text=devil_btn_text, callback_data=f"toggle_devil:{chat_id}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data=f"delete_chat:{chat_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_chats")],
    ])

    await cq.message.edit_text(
        f"–ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ —á–∞—Ç–µ <b>{chat_title}</b>?",
        parse_mode="HTML",
        reply_markup=kb
    )
    await cq.answer()


async def _get_chat_name(bot: Bot, chat_id: int) -> str:
    try:
        chat = await bot.get_chat(chat_id)
        return getattr(chat, "title", None) or f"ID {chat_id}"
    except Exception:
        return f"ID {chat_id}"


def _make_filter_handler(get_fn, set_fn, label: str):
    async def handler(cq: CallbackQuery):
        chat_id = int(cq.data.split(":", 1)[1])
        current = get_fn(chat_id)
        new_state = not current
        set_fn(chat_id, new_state)

        await cq.answer()
        await callback_manage_uc(cq)

        # –ª–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        chat_name = await _get_chat_name(bot, chat_id)
        await send_log(
            bot, chat_id,
            f"{'‚úÖ –í–∫–ª—é—á–µ–Ω' if new_state else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'} {label} "
            f"–∞–¥–º–∏–Ω–æ–º {cq.from_user.full_name} –≤ ¬´{chat_name}¬ª"
        )

    return handler


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
router.callback_query(F.data.startswith("filter_links:"))(
    _make_filter_handler(get_link_filter, set_link_filter, "—Ñ–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫")
)
router.callback_query(F.data.startswith("filter_caps:"))(
    _make_filter_handler(get_caps_filter, set_caps_filter, "–∞–Ω—Ç–∏–∫–∞–ø—Å")
)
router.callback_query(F.data.startswith("filter_spam:"))(
    _make_filter_handler(get_spam_filter, set_spam_filter, "–∞–Ω—Ç–∏—Å–ø–∞–º")
)
router.callback_query(F.data.startswith("filter_stickers:"))(
    _make_filter_handler(get_sticker_filter, set_sticker_filter, "–∞–Ω—Ç–∏-—Å—Ç–∏–∫–µ—Ä—ã")
)
router.callback_query(F.data.startswith("filter_swear:"))(
    _make_filter_handler(get_swear_filter, set_swear_filter, "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–∞—Ç–∞")
)
router.callback_query(F.data.startswith("filter_keywords:"))(
    _make_filter_handler(get_keywords_filter, set_keywords_filter, "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
)


@router.callback_query(F.data.startswith("logging:"))
async def callback_logging(cq: CallbackQuery, state: FSMContext):
    chat_id = int(cq.data.split(":", 1)[1])
    settings = get_log_settings(chat_id) or {}
    log_id = settings.get("log_chat_id")
    enabled = settings.get("is_logging_enabled", False)

    if not log_id:
        await cq.message.answer("üì• –í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.", parse_mode="HTML")
        await state.update_data(chat_id=chat_id)
        await state.set_state(LoggingStates.waiting_for_log_chat_id)
        return await cq.answer()

    if not enabled:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data=f"logging_change:yes:{chat_id}"),
                InlineKeyboardButton(text="–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"logging_change:no:{chat_id}")
            ]
        ])
        await cq.message.answer("–•–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —á–∞—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è?", reply_markup=kb)
        return await cq.answer()

    update_log_status(chat_id, False)
    await cq.answer()
    await callback_manage_uc(cq)

    # –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    chat_name = await _get_chat_name(bot, chat_id)
    await send_log(
        bot, chat_id,
        f"üîï –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {cq.from_user.full_name} –≤ ¬´{chat_name}¬ª"
    )


@router.callback_query(F.data.startswith("logging_change:"))
async def callback_logging_change(cq: CallbackQuery, state: FSMContext):
    _, ans, chat_id_str = cq.data.split(":")
    chat_id = int(chat_id_str)

    if ans == "yes":
        await cq.message.answer("üì• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.", parse_mode="HTML")
        await state.update_data(chat_id=chat_id)
        await state.set_state(LoggingStates.waiting_for_log_chat_id)
    else:
        update_log_status(chat_id, True)
        await cq.answer()
        await callback_manage_uc(cq)

        # –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ —Å–º–µ–Ω—ã —á–∞—Ç–∞
        chat_name = await _get_chat_name(bot, chat_id)
        await send_log(
            bot, chat_id,
            f"üîî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤–∫–ª—é—á—ë–Ω–Ω—ã–º –∞–¥–º–∏–Ω–æ–º {cq.from_user.full_name} –≤ ¬´{chat_name}¬ª"
        )


@router.message(LoggingStates.waiting_for_log_chat_id)
async def process_log_chat_id(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data["chat_id"]
    text = message.text.strip()
    chat_name = await _get_chat_name(bot, chat_id)

    if text.lower() == "off":
        update_log_status(chat_id, False)
        await message.answer("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        await send_log(
            bot, chat_id,
            f"üîï –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
        )
    else:
        try:
            new_id = int(text)
            await bot.send_message(new_id, "‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.")
            set_log_chat(chat_id, new_id)
            update_log_status(chat_id, True)
            ch = await bot.get_chat(new_id)
            title = ch.title or ch.username or str(new_id)
            await message.answer(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –≤ —á–∞—Ç: {title}")
            await send_log(
                bot, chat_id,
                f"üîî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} "
                f"–∏ —Ç–µ–ø–µ—Ä—å –∏–¥—ë—Ç –≤ ¬´{title}¬ª –≤ —á–∞—Ç–µ ¬´{chat_name}¬ª"
            )
        except Exception as e:
            return await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥-—á–∞—Ç: {e}")

    await state.clear()
    fake = CallbackQuery(
        id=str(message.message_id),
        from_user=message.from_user,
        chat_instance="",
        message=message,
        data=f"manage_uc:{chat_id}"
    )
    await callback_manage_uc(fake)


@router.callback_query(F.data.startswith("toggle_join_delete:"))
async def callback_toggle_join_delete(cq: CallbackQuery):
    chat_id = int(cq.data.split(":", 1)[1])
    current = get_join_delete(chat_id)
    new_state = not current
    set_join_delete(chat_id, new_state)

    await cq.answer()
    await callback_manage_uc(cq)

    chat_name = (await bot.get_chat(chat_id)).title or str(chat_id)
    await send_log(
        bot, chat_id,
        f"üóëÔ∏è –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ Join/Leave —Å–æ–æ–±—â–µ–Ω–∏–π "
        f"{'–≤–∫–ª—é—á–µ–Ω–æ' if new_state else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'} "
        f"–∞–¥–º–∏–Ω–æ–º {cq.from_user.full_name} –≤ ¬´{chat_name}¬ª"
    )


@router.callback_query(F.data.startswith("setup_welcome:"))
async def callback_setup_welcome(cq: CallbackQuery, state: FSMContext):
    chat_id = int(cq.data.split(":", 1)[1])
    if not await is_admin_in_chat(chat_id, cq.from_user.id):
        return await cq.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç.", show_alert=True)

    current = get_welcome_message(chat_id)
    prompt = (
        f"üîß –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n{current}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.\n"
        "–®–∞–±–ª–æ–Ω—ã: {first_name}, {username}, {chat_title}. HTML —Ä–∞–∑—Ä–µ—à–µ–Ω."
    ) if current else (
        "üîß –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.\n"
        "–®–∞–±–ª–æ–Ω—ã: {first_name}, {username}, {chat_title}. HTML —Ä–∞–∑—Ä–µ—à–µ–Ω."
    )

    await state.update_data(chat_id=chat_id)
    await cq.message.answer(prompt, parse_mode="HTML")
    await state.set_state(WelcomeStates.waiting_for_welcome)
    await cq.answer()


@router.message(WelcomeStates.waiting_for_welcome)
async def process_welcome_text(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data["chat_id"]
    text = message.text.strip()
    set_welcome_message(chat_id, text)

    await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n\n{text}")
    chat_name = await _get_chat_name(bot, chat_id)
    await send_log(
        bot, chat_id,
        f"‚úèÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} "
        f"(@{message.from_user.username or '‚Äî'}) –≤ —á–∞—Ç–µ ¬´{chat_name}¬ª:\n{text}"
    )
    await state.clear()


async def _delete_message_after(bot: Bot, chat_id: int, message_id: int, delay: int):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except exceptions.TelegramBadRequest:
        pass


@router.chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def on_user_join(event: ChatMemberUpdated):
    if event.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return

    welcome = get_welcome_message(event.chat.id)
    user = event.new_chat_member.user

    if welcome:
        text = welcome.format(
            first_name=user.first_name or "",
            username=f"@{user.username}" if user.username else "",
            chat_title=event.chat.title
        )
        sent: Message = await bot.send_message(
            event.chat.id,
            text,
            parse_mode="HTML"
        )

        timeout = get_welcome_delete_timeout(event.chat.id) or WELCOME_DELETE_DEFAULT
        if timeout > 0:
            asyncio.create_task(
                _delete_message_after(bot, sent.chat.id, sent.message_id, timeout)
            )

    chat_name = event.chat.title or f"ID {event.chat.id}"
    await send_log(
        bot, event.chat.id,
        f"üë§ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user.full_name} @{user.username or '‚Äî'} (#u{user.id}) "
        f"–≤ —á–∞—Ç–µ ¬´{chat_name}¬ª"
    )


@router.chat_member(ChatMemberUpdatedFilter(LEAVE_TRANSITION))
async def on_user_leave(event: ChatMemberUpdated):
    if event.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return

    user = event.old_chat_member.user
    chat_name = event.chat.title or f"ID {event.chat.id}"
    await send_log(
        bot, event.chat.id,
        f"üö™ –£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª: {user.full_name} @{user.username or '‚Äî'} "
        f"(#u{user.id}) –∏–∑ ¬´{chat_name}¬ª"
    )


@router.message(
    (F.new_chat_members.is_not(None) | F.left_chat_member.is_not(None)),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def delete_system_join_or_leave_message(message: Message):
    chat_id = message.chat.id
    if not get_join_delete(chat_id):
        return
    try:
        await message.delete()
    except (exceptions.TelegramForbiddenError, exceptions.TelegramBadRequest):
        pass


@router.callback_query(F.data.startswith("setup_rules:"))
async def callback_setup_rules(cq: CallbackQuery, state: FSMContext):
    chat_id = int(cq.data.split(":", 1)[1])
    if not await is_admin_in_chat(chat_id, cq.from_user.id):
        return await cq.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç.")

    current = get_rules(chat_id) or "(–Ω–µ –∑–∞–¥–∞–Ω—ã)"
    await state.update_data(chat_id=chat_id)
    await cq.message.answer(f"üîß –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n{current}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (HTML).")
    await state.set_state(RulesStates.waiting_for_rules)
    await cq.answer()


@router.message(RulesStates.waiting_for_rules)
async def process_rules_text(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data["chat_id"]
    text = message.text.strip()
    set_rules(chat_id, text)

    await message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n\n{text}")
    chat_name = await _get_chat_name(bot, chat_id)
    await send_log(
        bot, chat_id,
        f"‚úèÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –∏–∑–º–µ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} "
        f"(@{message.from_user.username or '‚Äî'}) –≤ —á–∞—Ç–µ ¬´{chat_name}¬ª:\n{text}"
    )
    await state.clear()


@router.callback_query(F.data.startswith("delete_chat:"))
async def callback_delete_chat(cq: CallbackQuery):
    chat_id = int(cq.data.split(":", 1)[1])
    remove_user_chat(cq.from_user.id, chat_id)
    await cq.message.edit_text("–ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
    await cq.answer()
    await send_log(
        bot, chat_id,
        f"üóëÔ∏è –ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {cq.from_user.full_name}"
    )


@router.callback_query(F.data.startswith("toggle_devil:"))
async def callback_toggle_devil(cq: CallbackQuery):
    chat_id = int(cq.data.split(":", 1)[1])
    new = not get_devil_mode(chat_id)
    set_devil_mode(chat_id, new)
    await cq.answer()
    await callback_manage_uc(cq)

    chat_name = (await bot.get_chat(chat_id)).title or str(chat_id)

    if new:
        await bot.send_message(
            chat_id,
            "üëø Devil mode –≤–∫–ª—é—á—ë–Ω! –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞—Ç–∞–º–∏."
        )
    else:
        await bot.send_message(
            chat_id,
            "üòà Devil mode –æ—Ç–∫–ª—é—á—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º."
        )

    await send_log(
        bot, chat_id,
        f"{'üëø Devil mode –≤–∫–ª—é—á—ë–Ω' if new else 'üòà Devil mode –æ—Ç–∫–ª—é—á—ë–Ω'} "
        f"–∞–¥–º–∏–Ω–æ–º {cq.from_user.full_name} –≤ ¬´{chat_name}¬ª"
    )


@router.callback_query(F.data == "back_to_chats")
async def callback_back_to_chats(cq: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await cq.message.delete()
    except:
        pass

    user_id = cq.from_user.id
    uc = get_user_chats(user_id)
    if not uc:
        # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            user_id,
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —á–∞—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ¬´–£—Å—Ç–∞–Ω–æ–≤–∫–∞¬ª.",
            parse_mode="Markdown"
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–æ–≤ + –∫–Ω–æ–ø–∫—É ¬´üîô –ù–∞–∑–∞–¥¬ª
        buttons = [
                      [InlineKeyboardButton(text=name, callback_data=f"manage_uc:{chat_id}")]
                      for chat_id, name in uc.items()
                  ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await bot.send_message(
            user_id,
            "–í–∞—à–∏ —á–∞—Ç—ã:",
            reply_markup=kb
        )

    await cq.answer()


def register_handlers_user_chats(dp):
    dp.include_router(router)
